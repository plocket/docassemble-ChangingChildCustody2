---
generic object: ALDocumentBundle
template: x.get_email_copy
content: |
  Email a copy of your Action Plan to yourself or someone else
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  % if user_need == 'change custody order':
  Your Personal Action Plan for changing your custody or Parenting Plan order
  % elif user_need =='change foreign custody order':
  Your Personal Action Plan for changing your custody or Parenting Plan order from another state
  % elif user_need ==  'respond to motion in custody':
  % if type_of_response == 'appeal':
  Your Personal Action Plan for responding to the appeal the other parent filed
  % else:
  Your Personal Action Plan for responding to a motion the other parent filed
  % endif 
  % endif
content: |
  Thank you for using the Alaska Court System's Guided Assistant Interview.

  Your Action Plan is attached.
---
id: final screen
decoration: pen-to-square
event: confirmation_and_download
question: |
  % if len(step_list) < 2:
  Get more information or help
  % else:
  # <i class="fa-thin fa-list"></i>Your Personal Action Plan is ready!
  % endif
subquestion: |  
  % if user_need == 'change custody order':
  #### Your Personal Action Plan for changing your custody or Parenting Plan order in ${ len(step_list) } steps
  % elif user_need =='change foreign custody order':
  #### Your Personal Action Plan for changing your custody or Parenting Plan order from another state in ${ len(step_list) } steps
  % elif user_need ==  'respond to motion in custody':
  % if type_of_response == 'appeal':
  #### Your Personal Action Plan for responding to the appeal the other parent filed, in ${ len(step_list) } steps
  % else:
  #### Your Personal Action Plan for responding to a motion the other parent filed, in ${ len(step_list) } steps
  % endif 
  % endif
    
  % if get_config("debug", False):
  <button id="akc_expand_all" class="btn other stuff">Expand all</button>
  <button id="akc_collapse_all" class="btn other stuff">Collapse all</button>
  % endif  
  
  % for iteration_index, step_tuple in enumerate( step_list ):
  ${ collapse_template(step_tuple[0], closed_icon="plus", open_icon="minus") }
  % endfor
  
  ${ al_user_bundle.download_list_html() }
  
  &nbsp;

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
  
  % if get_config("debug", False):
  [get the docx file](${ docx_changing_child_custody_attachment.docx.url_for() })
  % endif 
buttons:
  - Start over: restart
script: |
  <script>
  let expander = $("#akc_expand_all")
  expander.on("click", function () {
   Array.from(document.querySelectorAll('.al_collapse_template .collapse')).forEach((elem) => { elem.className += " show" })
  })
  
  let collapser = $("#akc_collapse_all")
  collapser.on("click", function () {
      Array.from(document.querySelectorAll('.al_collapse_template .collapse')).forEach((elem) => { elem.className = elem.className.replace(" show", "" ) })
  })
  </script>
---
code: |
  # Temporarily disable why_change
  old_why_change = {
     'set aside clerical error': True,
     'set aside mistake of fact': True,
     'set aside new evidence': True,
     'set aside misconduct': True,
     'modify circumstances changed': True,
     'modify parent to jail': True,
     'modify domestic violence': True,
     'modify other change': True,
     'appeal legal mistake': True,
     'set aside new evidence': True,
  }

  step_list = []
  if len(step_list) >= 2:
    pdf_pap_multistep_subtitle = True
  images_list = []
  distribution_certificate_list = []  
  reply_certificate_list = []
  other_party_in_case  = 'the other parent'
  case_type = 'custody'
  distribution_certificate_list.append({'image': distrib_cert_custody_divorce_image, 'text': "Certificate of Distribution shows the date the court sent your order to you."})
  file_motion_to_set_aside = ''
  file_motion_to_enforce = ''
  file_modify_filing_fee = ''
  file_step_heading = 'File your motion forms'
  # expect_after_motion is in what to expect step for filing motion for interim order w complaint, or answer/response, cannot use variable in docx template, must insert condition in what to expect step.
  expect_after_motion = ''
  reply_certificate_list.append({'image': service_cert_reply_image, 'text': "Certificate of Service at the bottom of the Reply form."})
  # motion_type used in expect_after_motion_step "What to expect after you file a ${ motion_type }"
  motion_type = 'motion'
  
  
  ######## the more complicated 'changing divorce court order interview' (https://github.com/A2JatAKCourts/docassemble-ChangingDivorceOrder) uses the function add_unique_step() but we do not need this function in simpler interviews which already take some time to assemble document.  
  
  if user_need == 'change foreign custody order':
    other_party_in_case  = 'the other parent'
    step_list.append((foreign_order_step, "foreign_order_idx"))
    step_list.append((ak_jurisdiction_step, "ak_jurisdiction_idx"))
    step_list.append((register_order_step, "register_order_idx"))
    step_list.append((modify_step, "modify_idx"))
    step_list.append((fill_modify_step, "fill_modify_idx"))
    step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
    step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
    images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
    step_list.append((cert_of_service_step, "cert_of_service_idx"))
    file_step_heading = 'File your Motion to Modify'
    file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
    step_list.append((file_motion_step, "file_motion_idx"))
    step_list.append((serve_motion_step, "serve_motion_idx"))
    motion_type = 'Motion to Modify'
    step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
  
  elif user_need == 'respond to motion in custody':
    middle_of_case
  
    # Row 2
    if type_of_response == 'modify':
      motion_type = 'Motion to Modify'
  
    # Rows 3 & 4
    if type_of_response == 'modify' and type_of_modification.any_true('child support', 'custody'):
      step_list.append((modify_step, "modify_idx"))
  
    # Row 5
    if type_of_response == 'reconsider' and respond_to_reconsider:
      step_list.append((respond_to_reconsider_step, "respond_to_reconsider_idx"))
      
    # Row 6
    if middle_of_case == 'no' and type_of_response == 'set aside':
        motion_type = 'Motion to Set Aside Judgment or Order'
      
    # Rows 7 & 8
    #if type_of_response == 'set aside' and respond_to_set_aside in('some','none'):
    #  motion_type = 'Motion to Set Aside Judgment or Order'    
    
    
    if (type_of_response == 'modify' and respond_to_modify == 'agree') or ( middle_of_case == 'no' and type_of_response =='set aside' and respond_to_set_aside == 'agree'):
      step_list.append((let_court_party_know_you_agree_step, "let_court_party_know_you_agree_idx"))
    
    if type_of_response == 'modify' or (middle_of_case == 'no' and type_of_response == 'set aside'):
      step_list.append((respond_in_writing_step, "respond_in_writing_idx"))
      
    if type_of_response in('modify', 'reconsider') or (middle_of_case == 'no' and type_of_response == 'set aside'):
      step_list.append((cert_of_service_step, "cert_of_service_idx"))
      step_list.append((file_response_step, "file_response_idx"))
      step_list.append((serve_motion_response_step, "serve_motion_response_idx"))
      
    
    if type_of_response == 'modify' or (middle_of_case == 'no' and type_of_response == 'set aside'):
      step_list.append((expect_after_response_step, "expect_after_response_idx"))
      
    if (type_of_response == 'modify' and respond_to_modify == 'agree') or (middle_of_case == 'no' and type_of_response == 'set aside' and respond_to_set_aside == 'agree'):
      step_list.append((contact_other_party_step, "contact_other_party_idx"))    
      step_list.append((file_agreement_step, "file_agreement_idx"))
    
    # Row 9
    if middle_of_case == 'no' and  type_of_response == 'appeal' and respond_to_appeal == 'agree':
      step_list.append((appeal_response_step, "appeal_response_idx"))
      step_list.append((appeal_contact_parent_step, "appeal_contact_parent_idx"))
      step_list.append((tell_supreme_court_step, "tell_supreme_court_idx"))
    
    # Rows 10 & 11
    if middle_of_case == 'no' and type_of_response == 'appeal' and respond_to_appeal in('some','none'):
      step_list.append((appeal_response_step, "appeal_response_idx"))

  else:    
       ##################### middle of case
  
    # Row 12 remove confirmation of motion question and \ motion_decision
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and interim_order_date_within_10_days \
      and parents_agree:
        step_list.append((pick_a_step_step, "pick_a_step_idx"))
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Reconsider"})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
    
    # Row 13
    # if middle_of_case == 'yes' \
    #   and type_of_interim_order == 'motion' \
    #   and interim_order_date_within_10_days \
    #   and parents_agree \
    #   and not motion_decision:
    #     step_list.append((parents_agree_step, "parents_agree_idx"))
    #     step_list.append((tell_the_court_step, "tell_the_court_idx"))
    
    # Row 14 remove confirmation of standing order question \ and standing order
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'standing order' \
      and parents_agree:
        step_list.append((pick_a_step_step, "pick_a_step_idx"))
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((standing_order_step, "standing_order_idx")) 
        step_list.append((motion_forms_step, "motion_forms_idx"))
        images_list.append({'image': service_cert_motion_shc_1300_image, 'text': "Certificate of Service at the bottom of a motion."})
        step_list.append((cert_of_service_step, "cert_of_service_idx")) 
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    # Row 15
    # if middle_of_case == 'yes' \
    #   and type_of_interim_order == 'standing order' \
    #   and parents_agree \
    #   and not standing_order:
    #     step_list.append((parents_agree_step, "parents_agree_idx"))
    #     step_list.append((tell_the_court_step, "tell_the_court_idx"))
        
    
    # Row 16 remove confirmation of motion question and \ motion_decision
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and interim_order_date_within_10_days \
      and not parents_agree:
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of Motion to Reconsider and Motion to Set Aside."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
    
    # Row 17 only get other parts of custody case = placeholder and get help and info 
    #  if middle_of_case == 'yes' \
    #    and type_of_interim_order == 'motion' \
    #    and interim_order_date_within_10_days \
    #    and not parents_agree \
    #    and not motion_decision:
    

    # Row 18 remove confirmation of standing order question \ and standing order
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'standing order' \
      and not parents_agree:
        step_list.append((standing_order_step, "standing_order_idx")) 
        step_list.append((motion_forms_step, "motion_forms_idx"))
        images_list.append({'image': service_cert_motion_shc_1300_image, 'text': "Certificate of Service at the bottom of a motion."})
        step_list.append((cert_of_service_step, "cert_of_service_idx")) 
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    # Row 19 only get other parts of custody case = placeholder and get help and info 
    #  if middle_of_case == 'yes' \
    #    and type_of_interim_order == 'standing order' \
    #    and not parents_agree \
    #    and not standing_order:
  
    # Row 20 & 21
    if middle_of_case == 'yes' \
      and type_of_interim_order == 'motion' \
      and not interim_order_date_within_10_days: 
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((modify_step, "modify_idx"))
        step_list.append((fill_modify_step, "fill_modify_idx"))
        step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
        step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
        images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Modify'
        file_modify_filing_fee = ''
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        motion_type = 'Motion to Modify'
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
    
    # Row 21 (don't need this, it automatically goes to final page)
    # if middle_of_case == 'yes' \
    #   and type_of_interim_order == 'motion' \
    #   and not interim_order_date_within_10_days \
    #   and not parents_agree:
    #     step_list.append((modify_step, "modify_idx"))
    #     step_list.append((fill_modify_step, "fill_modify_idx"))
    #     step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
    #     step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
    #     images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
    #     step_list.append((cert_of_service_step, "cert_of_service_idx"))
    #     file_step_heading = 'File your Motion to Modify'
    #     file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
    #     step_list.append((file_step, "file_idx"))
    #     step_list.append((serve_step, "serve_idx"))
    #     step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
        
        
    #  Row 23 missed reconsideration deadline only get other parts of custody case = placeholder and get help and info 
    #  if middle_of_case == 'yes' \
    #  and type_of_interim_order == 'motion' \
    #  and not interim_order_date_within_10_days \
    #  and not parents_agree \
    #  and not motion_decision:

       ##################### after final order
       
    # removed confirmation question \ and motion_to_modify
    if middle_of_case == 'no' \
      and why_change in('review', 'schedule'):
        if parents_agree:
            step_list.append((pick_a_step_step, "pick_a_step_idx"))
            step_list.append((parents_agree_step, "parents_agree_idx"))
            step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((modify_step, "modify_idx"))
        step_list.append((fill_modify_step, "fill_modify_idx"))
        step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
        step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
        images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Modify'
        file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        motion_type = 'Motion to Modify'
        step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
        # if not parents_agree \
        #   and motion_to_modify:
        #     step_list.append((modify_step, "modify_idx"))
        #     step_list.append((fill_modify_step, "fill_modify_idx"))
        #     step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
        #     step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
        #     images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
        #     step_list.append((cert_of_service_step, "cert_of_service_idx"))
        #     file_step_heading = 'File your Motion to Modify'
        #     file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
        #     step_list.append((file_step, "file_idx"))
        #     step_list.append((serve_step, "serve_idx"))
        #     step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
        
    
    # See Rows 24 & 25
    # if middle_of_case == 'no'\
    #   and why_change == 'problem':
    #     if final_order_date_within_10_days \
    #       and parents_agree \
    #       and motion_for_reconsideration:
    #         step_list.append((pick_a_step_step, "pick_a_step_idx"))
            
    # deleted from line 225 after if "and why_change.any_true() \"
    # if middle_of_case == 'no'\
    #   and why_change == 'problem':
    #     if not final_order_date_within_10_days \
    #       and parents_agree \
    #       and ((defined('appeal') and appeal) \
    #         or (defined('set_aside') and set_aside) \
    #         or (defined('modify_within_15_days') and modify_within_15_days) \
    #         or (defined('modify_after_15') and modify_after_15 in('AK order', 'foreign order'))):
    #           step_list.append((pick_a_step_step, "pick_a_step_idx"))
    
    #  if middle_of_case == 'no' \
    #    and why_change == 'problem' \
    #    and final_order_date_within_10_days is False \
    #    and parents_agree is False:
    #      if defined('appeal') and appeal:
    #        if defined('set_aside') and set_aside \
    #          or ((defined('modify_within_15_days') and modify_within_15_days) \
    #          or (defined('modify_after_15') and modify_after_15)):
    #            step_list.append((pick_a_step_step, "pick_a_step_idx"))
    #      elif defined('set_aside') and set_aside \
    #        and ((defined('modify_within_15_days') and modify_within_15_days) \
    #        or (defined('modify_after_15') and modify_after_15)):
    #          step_list.append((pick_a_step_step, "pick_a_step_idx"))
      #  and len(why_change.true_values()) >= 2:
      #  step_list.append((pick_a_step_step, "pick_a_step_idx"))
    
    #  Rows 24 - 27
    if middle_of_case == 'no' \
      and why_change == 'problem' \
      and final_order_date_within_10_days:
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
        step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
        images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of Motion to Reconsider and Motion to Set Aside."})
        step_list.append((cert_of_service_step, "cert_of_service_idx"))
        file_step_heading = 'File your Motion to Reconsider'
        step_list.append((file_motion_step, "file_motion_idx"))
        step_list.append((serve_motion_step, "serve_motion_idx"))
        step_list.append((expect_reconsider_step, "expect_reconsider_idx"))

    
    #  Row 26 & 27
    # if middle_of_case == 'no' \
    #   and why_change == 'problem' \
    #   and final_order_date_within_10_days \
    #   and not parents_agree:
    #     if motion_for_reconsideration:
    #       step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
    #       step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
    #       images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of Motion to Reconsider and Motion to Set Aside."})
    #       step_list.append((cert_of_service_step, "cert_of_service_idx"))
    #       file_step_heading = 'File your Motion to Reconsider'
    #       step_list.append((file_step, "file_idx"))
    #       step_list.append((serve_step, "serve_idx"))
    #       step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
       

    #  Rows 32  - 70 
    if middle_of_case == 'no' \
      and why_change == 'problem' \
      and final_order_date_within_15_days:
      step_list.append((pick_a_step_step, "pick_a_step_idx"))
      if parents_agree:
        step_list.append((parents_agree_step, "parents_agree_idx"))
        step_list.append((tell_the_court_step, "tell_the_court_idx"))
       # deleted from just after if below, "why_change['appeal legal mistake'] and"
      # if appeal:
      step_list.append((appeal_step, "appeal_idx"))
        
      # deleted from just after if below, "why_change.any_true('set aside clerical error','set aside mistake of fact','set aside new evidence','set aside misconduct') and" 
      # if set_aside:
      file_motion_to_set_aside = 'If you decide to file a <b>Motion to Set Aside</b>::'
      step_list.append((learn_set_aside_step, "learn_set_aside_idx"))   
      step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
      images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Set Aside."})
        
      
      # deleted from just after if below, "why_change.any_true('modify circumstances changed','modify parent to jail','modify domestic violence','modify other change' ) and"
      # if modify_within_15_days:
      #   file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
      #   step_list.append((modify_step, "modify_idx"))
      #   step_list.append((fill_modify_step, "fill_modify_idx"))
      #   step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
      #   step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
      # if (defined('set_aside') and set_aside) or (defined('modify_within_15_days') and modify_within_15_days):
      #   if (defined('set_aside') and set_aside):
      #    images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Set Aside."})
      #  if (defined('modify_within_15_days') and modify_within_15_days):
      #    images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})
      step_list.append((cert_of_service_step, "cert_of_service_idx"))
      file_step_heading = 'File your Motion to Set Aside'
      step_list.append((file_motion_step, "file_motion_idx"))
      step_list.append((serve_motion_step, "serve_motion_idx"))
      motion_type = 'Motion to Set Aside'
      step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
          

    # Rows 71 - 91
    if middle_of_case == 'no' \
      and why_change == 'problem' \
      and not final_order_date_within_10_days \
      and not final_order_date_within_15_days:
        if parents_agree:
          step_list.append((pick_a_step_step, "pick_a_step_idx"))
          step_list.append((parents_agree_step, "parents_agree_idx"))
          step_list.append((tell_the_court_step, "tell_the_court_idx"))
        else:
          if defined('final_order_period')  \
            and guess_final_order_date == 'unknown':
              if len(unknown_final_date.true_values()) > 1:
                  step_list.append((pick_a_step_step, "pick_a_step_idx"))
    
    # deleted from just after if below, "why_change.any_true('set aside clerical error','set aside mistake of fact','set aside new evidence','set aside misconduct' ) and 
        # if set_aside:
      
        if (defined('final_order_period') \
            and not guess_final_order_date == 'unknown') \
          or (final_order_date != '' \
            and date_difference(starting=final_order_date, ending=today()).days > 15):
          step_list.append((learn_set_aside_step, "learn_set_aside_idx"))
          step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
          images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Set Aside."})
          step_list.append((cert_of_service_step, "cert_of_service_idx"))
          file_step_heading = 'File your Motion to Set Aside'
          step_list.append((file_motion_step, "file_motion_idx"))
          step_list.append((serve_motion_step, "serve_motion_idx"))
          motion_type = 'Motion to Set Aside'
          step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
  
      
        if defined('final_order_period') \
          and guess_final_order_date == 'unknown':
            if unknown_final_date['reconsider']:
              step_list.append((learn_reconsider_step, "learn_reconsider_idx"))
              step_list.append((fill_reconsider_step, "fill_reconsider_idx"))
            if unknown_final_date['appeal']:                
              step_list.append((appeal_step, "appeal_idx"))
            if unknown_final_date['set aside']:
              step_list.append((learn_set_aside_step, "learn_set_aside_idx"))
              step_list.append((fill_set_aside_step, "fill_set_aside_idx"))
            if unknown_final_date.any_true('reconsider','set aside'):
              images_list.append({'image': service_cert_reconsider_set_aside_image, 'text': "Certificate of Service at the bottom of the Motion to Reconsider and the Motion to Set Aside."})
              step_list.append((cert_of_service_step, "cert_of_service_idx"))
              if not unknown_final_date['set aside']:
                file_step_heading = 'File your Motion to Reconsider'
              elif not unknown_final_date['reconsider']:
                file_step_heading = 'File your Motion to Set Aside'
              step_list.append((file_motion_step, "file_motion_idx"))
              step_list.append((serve_motion_step, "serve_motion_idx"))
              if unknown_final_date['reconsider']:
                step_list.append((expect_reconsider_step, "expect_reconsider_idx"))
              if unknown_final_date['set aside']:
                motion_type = 'Motion to Set Aside'
                step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
       
    # Rows 71 - 91
    # if middle_of_case == 'no' \
    #   and why_change == 'problem' \



        # if why_change.any_true('modify circumstances changed','modify parent to jail','modify domestic violence','modify other change'):
        #  if modify_after_15 == 'foreign order':
          #  step_list.append((foreign_order_step, "foreign_order_idx"))
          #  step_list.append((ak_jurisdiction_step, "ak_jurisdiction_idx"))
          #  step_list.append((register_order_step, "register_order_idx"))
        #  if modify_after_15 in('AK order','foreign order'):
          #  file_modify_filing_fee = '<li>Pay the $75 fee to file your Motion to Modify</li><ul><li>Call the <a href="https://courts.alaska.gov/shc/family">Family Law Self-HelpCenter</a><br>(907)264-0851, or<br>(866)279-0851,<br>or</li><li>Use <strong>Exemption From the Payment of Fees, TF-920</strong>[<a href="https://public.courts.alaska.gov/web/forms/docs/tf-920.pdf">Fill-In PDF</a>]</li></ul>'
          #  step_list.append((modify_step, "modify_idx"))
          #  step_list.append((fill_modify_step, "fill_modify_idx"))
          #  step_list.append((calculate_child_support_step, "calculate_child_support_idx"))
          #  step_list.append((dont_wait_modify_custody_divorce_step, "dont_wait_modify_custody_divorce_idx"))
          #  images_list.append({'image': service_cert_modify_image, 'text': "Certificate of Service at the bottom of a Motion to Modify."})

        #  if (defined('set_aside') and set_aside) or (defined('modify_after_15') and modify_after_15 in('AK order','foreign order')):
          #  step_list.append((cert_of_service_step, "cert_of_service_idx"))
          #  if (defined('set_aside') and set_aside) and (defined('modify_after_15') and modify_after_15 in('AK order','foreign order')):
            #  file_step_heading = 'File your motion forms'
          #  elif defined('set_aside') and set_aside: 
            #  file_step_heading = 'File your Motion to Set Aside'
          #  else: # (defined('modify_after_15') and modify_after_15 in('AK order','foreign order')):
            #  file_step_heading = 'File your Motion to Modify'
          
          #  step_list.append((file_step, "file_idx"))
          #  step_list.append((serve_step, "serve_idx"))
          #  step_list.append((expect_after_motion_step, "expect_after_motion_idx"))
   #  Rows 72  - 75 
    #if middle_of_case == 'no' \
    #  and not final_order_date_within_10_days \
    #  and not final_order_date_within_15_days \
    #  and not parents_agree:
    #    if why_change.any_true('set aside clerical error','set aside mistake of fact','set aside new evidence','set aside misconduct' ) and set_aside:
    #      step_list.append((set_aside_step, "set_aside_idx"))
    #    if why_change.any_true('modify circumstances changed','modify parent to jail','modify domestic violence','modify other change' ) and modify_after_15s:
    #      step_list.append((modify_step, "modify_idx"))
  

    
  step_list.append((get_help, "get_help_idx"))
    
  for iter_idx, step_tuple in enumerate( step_list ):
    define(step_tuple[ 1 ], iter_idx + 1)
  get_steps = True
---
code: |
  def add_unique_image(new_image, image_list):
    is_unique = True
    for image in image_list:
      if image['image'] == new_image['image']:
        is_unique = False
    if is_unique:
      image_list.append(new_image)
---
